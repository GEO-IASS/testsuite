<?xml version='1.0' encoding='UTF-8'?>
<test_suites>
    <test_type>feature</test_type>
    <multi_test_suites>
        <algorithm>random_forest</algorithm>
        <methods>
                <method>         
                    <name>rf_train</name>
                    <parameter>
                       <name>benchmark</name>
                        <value>TemplateExecutor</value>          
                    </parameter>
                    <parameter>
                        <name>split_criterion_name</name>
                        <value>gini</value>            
                    </parameter>     
                </method>
                <method>         
                    <name>rf_score</name>  
                    <parameter>
                        <name>benchmark</name>
                        <value>TemplateExecutor</value>          
                    </parameter>   
                </method>   
                <method>         
                    <name>rf_classify</name>
                    <parameter>
                        <name>benchmark</name>
                        <value>TemplateExecutor</value>          
                    </parameter> 
                </method>
                <method>         
                    <name>rf_display</name>
                    <parameter>
                            <name>benchmark</name>
                            <value>TemplateExecutor</value>          
                    </parameter>
                 </method> 
                 <method>         
                    <name>rf_clean</name>
                        <parameter>
                            <name>benchmark</name>
                            <value>TemplateExecutor</value>          
                        </parameter>   
                 </method>
                 <method>
                    <name>rf_cross_validate</name>
                        <parameter>
                            <name>benchmark</name>
                            <value>TemplateExecutor</value>
                        </parameter>
                 </method>
        </methods> 
        <test_suite>
            <name>rf_gini_dataset</name>
            <comments>     
                RF00:verify dataset 
            </comments>
            <!-- It indicate max execution times--> 
            <execute_rate>1</execute_rate>            
            <method>
                <name>rf_train</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_madelon</value><value>rf_hypo</value><value>rf_abalone</value><value>rf_internet_ad</value><value>rf_isolet</value><value>rf_musk</value><value>rf_poker_hand</value>
                    <value>rf_adult</value><value>rf_connect</value><value>rf_donation</value><value>rf_census_income</value><value>rf_kddcup</value>
                </list_parameter> 
            </method>
            <method>
                <name>rf_score</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_madelon</value><value>rf_hypo</value><value>rf_abalone</value><value>rf_internet_ad</value><value>rf_isolet</value><value>rf_musk</value><value>rf_poker_hand</value>
		    <value>rf_adult</value><value>rf_connect</value><value>rf_donation</value><value>rf_census_income</value><value>rf_kddcup</value>
                </list_parameter>  
            </method>
            <method>
                <name>rf_classify</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_madelon</value><value>rf_hypo</value><value>rf_abalone</value><value>rf_internet_ad</value><value>rf_isolet</value><value>rf_musk</value><value>rf_poker_hand</value>
		    <value>rf_adult</value><value>rf_connect</value><value>rf_donation</value><value>rf_census_income</value><value>rf_kddcup</value>
                </list_parameter>  
                <tear_down>
                        drop table if exists madlibtestresult.forest_classify_result;
                </tear_down>
            </method>
	    <method>
                <name>rf_score</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_madelon_test</value><value>rf_hypo_test</value><value>rf_abalone_test</value><value>rf_internet_ad</value><value>rf_isolet_test</value><value>rf_musk_test</value>
		    <value>rf_poker_hand_test</value><value>rf_adult_test</value><value>rf_connect</value><value>rf_donation_test</value><value>rf_census_income_test</value>
		    <value>rf_kddcup_test</value>
                </list_parameter>
            </method>
            <method>
                <name>rf_classify</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_madelon_test</value><value>rf_hypo_test</value><value>rf_abalone_test</value><value>rf_internet_ad</value><value>rf_isolet_test</value><value>rf_musk_test</value>
		    <value>rf_poker_hand_test</value><value>rf_adult_test</value><value>rf_connect</value><value>rf_donation_test</value><value>rf_census_income_test</value>
		    <value>rf_kddcup_test</value>
                </list_parameter>
            </method>
            <method>
                <name>rf_display</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_madelon</value><value>rf_hypo</value><value>rf_abalone</value><value>rf_internet_ad</value><value>rf_isolet</value><value>rf_musk</value><value>rf_poker_hand</value>
		    <value>rf_adult</value><value>rf_connect</value><value>rf_donation</value><value>rf_census_income</value><value>rf_kddcup</value> 
                </list_parameter>  
            </method>
            <method>
                <name>rf_clean</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_madelon</value><value>rf_hypo</value><value>rf_abalone</value><value>rf_internet_ad</value><value>rf_isolet</value><value>rf_musk</value><value>rf_poker_hand</value>
		    <value>rf_adult</value><value>rf_connect</value><value>rf_donation</value><value>rf_census_income</value><value>rf_kddcup</value> 
                </list_parameter> 
                <tear_down>
	                drop table if exists madlibtestresult.forest_classify_result;
	        </tear_down>
           </method>
        </test_suite>

        <test_suite>
            <name>rf_gini_num_of_trees_abalone</name>
            <comments>
                RF02:verify number of trees
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <list_parameter>
                    <name>number_of_trees</name>
                    <value>1</value>
                    <value>50</value>
                </list_parameter>
                <parameters>
                    <parameter>
                        <name>dataset</name>
                        <value>rf_abalone</value>
                    </parameter>
                 </parameters>
            </method>
            <method>
                <name>rf_score</name>
                <parameters>
                        <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
            </method>
       </test_suite>

       <test_suite>
            <name>rf_gini_sampling_percentage_poker_hand</name>
            <comments>
                RF04:verify sampling percentage
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <parameters>
                        <parameter>
                                <name>dataset</name>
                                <value>rf_poker_hand</value>
                        </parameter>
                </parameters> 
                <list_parameter>
                    <name>sampling_percentage</name>
                    <value>0.2</value>
                    <value>0.4</value>
                    <value>0.6</value>
                    <value>0.8</value>
                    <value>1.0</value>
                </list_parameter>
            </method>
            <method>
                <name>rf_score</name>
                <parameters>
                        <parameter><name>dataset</name><value>rf_poker_hand</value></parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_poker_hand</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_poker_hand</value></parameter>
                </parameters>
            </method>  
       </test_suite>
       

       <test_suite>
            <name>rf_gini_features_per_node_madelon</name>
            <comments>
                RF06:verify features per node:madelon
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <list_parameter>
                    <name>features_per_node</name>
                    <value>10</value>
                    <value>40</value>
                </list_parameter>
		<parameters>
			<parameter><name>dataset</name><value>rf_madelon</value></parameter>
			<parameter><name>number_of_trees</name><value>5</value></parameter>
		</parameters>
            </method>
            <method>
                <name>rf_score</name>
                <parameters>
                        <parameter><name>dataset</name><value>rf_madelon</value></parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_madelon</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_madelon</value></parameter>
                </parameters>
            </method>
       </test_suite>

       
        
        <test_suite>
            <name>rf_gini_display</name>
            <comments>     
                RF08: It is to verify RF result at different display function.
            </comments>
            <!-- It indicate max execution times--> 
            <execute_rate>1</execute_rate>            
            <method>
                <name>rf_train</name>
                <parameters><parameter>
                    <name>dataset</name>
                    <value>rf_madelon</value>
                </parameter></parameters>
            </method>
            <method>
                <name>rf_display</name>
		<parameters>
                        <parameter>
                                  <name>tree_ids</name>
                                  <value>NULL</value>
                          </parameter>
		        <parameter>
			          <name>rf_table_name</name>
        			  <value>madlibtestresult.madelon_forest</value>
      			  </parameter>
		</parameters> 
            </method>
            <method>
                <name>rf_display</name>
                <parameters>
                        <parameter>
                                  <name>tree_ids</name>
                                  <value>{10}</value>
                          </parameter>
                        <parameter>
                                  <name>rf_table_name</name>
                                  <value>madlibtestresult.madelon_forest</value>
                          </parameter>
                </parameters>
            </method>
            <method>
                <name>rf_display</name>
                <parameters>
                        <parameter>
                                  <name>tree_ids</name>
                                  <value>{1}</value>
                          </parameter>
                        <parameter>
                                  <name>rf_table_name</name>
                                  <value>madlibtestresult.madelon_forest</value>
                          </parameter>
                </parameters>
            </method>
            <method>
                <name>rf_display</name>
                <parameters>
                        <parameter>
                                  <name>tree_ids</name>
                                  <value>{10}</value>
                          </parameter>
                        <parameter>
                                  <name>max_depth</name>
                                  <value>1</value>
                          </parameter>
                        <parameter>
                                  <name>rf_table_name</name>
                                  <value>madlibtestresult.madelon_forest</value>
                          </parameter>
                </parameters>
            </method>
            <method>
                <name>rf_display</name>
                <parameters>
                        <parameter>
                                  <name>tree_ids</name>
                                  <value>{10}</value>
                          </parameter>
                        <parameter>
                                  <name>max_depth</name>
                                  <value>10</value>
                          </parameter>
                        <parameter>
                                  <name>rf_table_name</name>
                                  <value>madlibtestresult.madelon_forest</value>
                          </parameter>
                </parameters>
            </method>
            
            <method>
                <name>rf_clean</name>
                <parameters><parameter>
                    <name>dataset</name>
                    <value>rf_madelon</value>
                </parameter></parameters>
           </method>
        </test_suite>

        <test_suite>
            <name>rf_specialdataset_gini</name>
            <comments>
                RF09: Test RF result correctness on special data sets such as empty table; all rows are same class; duplicate rows; conflict rows.
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_golf_duplicate</value><value>rf_golf_conflict</value><value>rf_nursery_conflict</value><value>rf_golfwithclass</value>
                </list_parameter>
		<parameters>
			<parameter>
				<name>sampling_percentage</name>
				<value>1.0</value>
			</parameter>
		</parameters>
            </method>
            <method>
                <name>rf_score</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_golf_duplicate</value><value>rf_golf_conflict</value><value>rf_nursery_conflict</value><value>rf_golfwithclass</value>
                </list_parameter>
            </method>

            <method>
                <name>rf_classify</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_golf_duplicate</value><value>rf_golf_conflict</value><value>rf_nursery_conflict</value><value>rf_golfwithclass</value>
                </list_parameter>
            </method>

            <method>
                <name>rf_display</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_golf_duplicate</value><value>rf_golf_conflict</value><value>rf_nursery_conflict</value><value>rf_golfwithclass</value>
                </list_parameter>
            </method>
            <method>
                <name>rf_clean</name>
                <list_parameter>
                    <name>dataset</name>
                    <value>rf_golf_duplicate</value><value>rf_golf_conflict</value><value>rf_nursery_conflict</value><value>rf_golfwithclass</value>
                </list_parameter>
               <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
                   </tear_down>
           </method>
        </test_suite>

       <test_suite>
            <name>rf_gini_node_prune_threshold_poker_hand</name>
            <comments>
                RF10:verify node_prune_threshold
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <parameters>
                        <parameter>
                                <name>dataset</name>
                                <value>rf_poker_hand</value>
                        </parameter>
                </parameters> 
                <list_parameter>
                    <name>node_prune_threshold</name>
                    <value>0.002</value>
                    <value>0.004</value>
                    <value>1.0</value>
                </list_parameter>
            </method>
            <method>
                <name>rf_score</name>
                <parameters>
                        <parameter><name>dataset</name><value>rf_poker_hand</value></parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_poker_hand</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_poker_hand</value></parameter>
                </parameters>
            </method>  
       </test_suite>


        <test_suite>
            <name>rf_gini_node_split_threshold_abalone</name>
            <comments>
                RF11:verify node_split_threshold
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <parameters>
                        <parameter>
                                <name>dataset</name>
                                <value>rf_abalone</value>
                        </parameter>
                </parameters> 
                <list_parameter>
                    <name>node_split_threshold</name>
                    <value>0.02</value>
                    <value>0.04</value>
                    <value>1.0</value>
                </list_parameter>
            </method>
            <method>
                <name>rf_score</name>
                <parameters>
                        <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
            </method>  
       </test_suite>
       
       
        <test_suite>
            <name>rf_gini_max_tree_depth_abalone</name>
            <comments>
                RF12:verify max_tree_depth
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <parameters>
                        <parameter>
                                <name>dataset</name>
                                <value>rf_abalone</value>
                        </parameter>
                </parameters> 
                <list_parameter>
                    <name>max_tree_depth</name>
                    <value>1</value>
                    <value>20</value>
                </list_parameter>
            </method>
            <method>
                <name>rf_score</name>
                <parameters>
                        <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_abalone</value></parameter>
                </parameters>
            </method>  
       </test_suite>

        <test_suite>
            <name>rf_gini_is_serial_classification_donation</name>
            <comments>
                RF12:verify is_serial_classification
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <parameters>
                        <parameter>
                                <name>dataset</name>
                                <value>rf_donation</value>
                        </parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_donation</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_donation</value></parameter>
			<parameter><name>is_serial_classification</name><value>true</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_donation</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_donation</value></parameter>
                        <parameter><name>is_serial_classification</name><value>true</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_donation</value></parameter>
                </parameters>
            </method>
       </test_suite>

        <test_suite>
            <name>rf_gini_num_of_trees_hypo</name>
            <comments>
                RF01: verify number of trees
            </comments>
            <!-- It indicate max execution times-->
            <execute_rate>1</execute_rate>
            <method>
                <name>rf_train</name>
                <list_parameter>
                    <name>number_of_trees</name>
                    <value>1</value>
                    <value>80</value>
                </list_parameter>
                <parameters>
                    <parameter>
                        <name>dataset</name>
                        <value>rf_hypo</value>
                    </parameter>
                 </parameters>
            </method>
            <method>
                <name>rf_score</name>
                <parameters>
                        <parameter><name>dataset</name><value>rf_hypo</value></parameter>
                </parameters>
            </method>
            <method>
                <name>rf_classify</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_hypo</value></parameter>
                </parameters>
                <tear_down>
                       drop table if exists madlibtestresult.forest_classify_result;
               </tear_down>
            </method>
            <method>
                <name>rf_clean</name>
                <parameters>
                      <parameter><name>dataset</name><value>rf_hypo</value></parameter>
                </parameters>
            </method>
       </test_suite>

	<test_suite>
		<name>rf_gini_cross_validate</name>
            <comments>
                RF01: verify number of trees
            </comments>
		<execute_rate>1</execute_rate>
		<method>
			<name>rf_cross_validate</name>
                        <list_parameter>
                                <name>dataset</name>
                                <value>rf_hypo</value>
                                <value>rf_abalone</value>
                                <value>rf_musk</value>
                                <value>rf_poker_hand</value>
                                <value>rf_adult</value>
                                <value>rf_connect</value>
                        </list_parameter>
			<parameters>
				<parameter><name>split_criterion</name><value>gini</value></parameter>
			</parameters>
		</method>
	</test_suite>

       
    </multi_test_suites>
        
</test_suites>        
