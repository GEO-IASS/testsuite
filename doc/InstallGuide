### GPDB/PGDB clusters and MADlib pre-installation, test data preparation ###

Step 01: Install database for test result capturing purpose
         For example, install GPDB 4.2.0.0 cluster on one dedicate host with database '$RESULT_DB_NAME' initialized to capture the test results of each run

Step 02: Install database(s) for test cases execution purpose, multiple GPDBs/PGDBs are supported
         For exmaple, install a GPDB 4.2.0.0 cluster, a GPDB 4.1.0.0 cluster, and a POSTGRES 9.1 database like below:
             Install GPDB 4.2.0.0 clusters on N hosts (with C physical cores on each host): 1 for master host and the other N-1 for segment hosts with C segments on each host
             Install GPDB 4.1.0.0 clusters on N hosts (with C physical cores on each host): 1 for master host and the other N-1 for segment hosts with C segments on each host
	     Install POSTGRES 9.1 on 1 host

         NOTE: The master host of above 2 GPDBs and host of POSTGRES should be the same host.
               This host will also be used to install MADlib and MADMARK.

Step 03: Download madmark and place the madmark source code in a folder, which will be $MADMARK_HOME
         For example, download madmark at https://github.com/madlib/testsuite

Step 04: Configure test result database in madmark

         (1) Run 'cd $MADMARK_HOME/testspec/metadata; cp testconfig.xml.example testconfig.xml'
         (2) Edit '$MADMARK_HOME/testspec/metadata/testconfig.xml' as following example:

	<configuration>
        	<metadatadb>
        	    <user>$RESULT_DB_USER</user>
        	    <host>$RESULT_DB_HOST</host>
        	    <port>$RESULT_DB_PORT</port>
        	    <database>$RESULT_DB_NAME</database>
        	    <schema>$RESULT_DB_SCHEMA</schema>
        	</metadatadb>
	</configuration>

Step 05: Configure testing clusters in madmark

         (1) Edit '$MADMARK_HOME/testspec/metadata/analyticstool.xml' as following example:

        <analytics_tool>
            <name>GPDB42</name>
            <kind>greenplum</kind>
            <toolversion>4.2.0.0</toolversion>
            <madlibversion>0.3</madlibversion>
            <host>$TEST_DB_42_HOST</host>
            <port>$TEST_DB_42_PORT</port>
            <database>madlib</database>
            <user>madlibtester</user>
            <superuser>$TEST_DB_42_USER</superuser>
            <segmentnum>$TEST_DB_42_SEG_NUM</segmentnum>
            <master_dir>$TEST_DB_42_MASTER_DATA_DIRECTORY</master_dir>
            <env>$TEST_DB_42_HOME/greenplum_path.sh</env>
            <sql_source>$MADMARK_HOME/dataset/madlibtestdata_GP.sql.gz</sql_source>
        </analytics_tool>

        <analytics_tool>
            <name>GPDB41</name>
            <kind>greenplum</kind>
            <toolversion>4.1.0.0</toolversion>
            <madlibversion>0.3</madlibversion>
            <host>$TEST_DB_41_HOST</host>
            <port>$TEST_DB_41_PORT</port>
            <database>madlib</database>
            <user>madlibtester</user>
            <superuser>$TEST_DB_41_USER</superuser>
            <segmentnum>$TEST_DB_41_SEG_NUM</segmentnum>
            <master_dir>$TEST_DB_41_MASTER_DATA_DIRECTORY</master_dir>
            <env>$TEST_DB_41_HOME/greenplum_path.sh</env>
            <sql_source>$MARDMARK_HOME/dataset/madlibtestdata_GP.sql.gz</sql_source>
        </analytics_tool>

        <analytics_tool>
            <name>PGDB91</name>
            <kind>postgres</kind>
            <toolversion>9.1.2</toolversion>
            <madlibversion>0.3</madlibversion>
            <host>$TEST_DB_91_HOST</host>
            <port>$TEST_DB_91_PORT</port>
            <database>madlib</database>
            <user>madlibtester</user>
            <superuser>$TEST_DB_91_USER</superuser>
            <segmentnum>1</segmentnum>
            <master_dir>$TEST_DB_91_DATA_DIRECTORY</master_dir>
            <env>$TEST_DB_91_HOME/postgres_path.sh</env>
            <sql_source>$MADMARK_HOME/dataset/madlibtestdata_PG.sql.gz</sql_source>
        </analytics_tool>

Step 06: Load test data into testing clusters using 'cd $MADMARK_HOME/bin; python load.py'

         NOTE: before loading of the test data, you need to create a dump file which contains tables dumped from GPDB/PGDB, madlibtestdata_GP.sql.gz for example
               and then set sql_source as the full path of the dump file as showed in Step 05

Step 07: Install MADlib binary for each GPDB cluster and POSTGRES instance with corresponding MADlib installer

         Method 1 - Use gppkg for MADlib (preferred solution at present for GPDB)

         Method 2 - Use rpm package (preferred solution at present PGDB)
             (1) Logon to the host as superuser
             (2) Download MADlib rpm package from pulse server, and copy the rpm packages over all segment hosts using gpscp
             (3) Install MADlib binaries as superuser using 'rpm -ivh --force $MADLIB_RPM_INSTALLER --relocate /usr/local=$CORRESPONDING_FOLDER_FOR_CURRENT_PLATFORM' 

Step 08: Install MADlib in GPDB clusters and POSTGRES instance

         For each GPDB cluster:
             (1) Run 'gpstart -a -d $PATH_TO_MASTER_DATA_DIRECTORY'
             (2) Run '$CORRESPONDING_FOLDER_FOR_CURRENT_PLATFORM/madpack/madpack.py -p greenplum -c $GPDB_USER@$GPDB_HOST/madlib uninstall'
             (3) Run '$CORRESPONDING_FOLDER_FOR_CURRENT_PLATFORM/madpack/madpack.py -p greenplum -c $GPDB_USER@$GPDB_HOST/madlib install'
             (4) Run 'psql -d madlib -U $GPDB_USER -p $GPDB_PORT -c "GRANT USAGE ON SCHEMA madlib TO madlibtester"'
             (5) Run 'gpstop -a -d $PATH_TO_MASTER_DATA_DIRECTORY'

         For each POSTGRES instance:
             (1) Run 'pg_ctl start -w -D $PATH_TO_PG_DATA_DIRECTORY'
             (2) Run '$CORRESPONDING_FOLDER_FOR_CURRENT_PLATFORM/madpack/madpack.py -p postgres -c $PGDB_USER@$PGDB_HOST/madlib uninstall'
             (3) Run '/CORRESPONDING/FOLDER/FOR/CURRENT/PLATFORM/madpack/madpack.py -p postgres -c $PGDB_USER@$PGDB_HOST/madlib install'
             (4) Run 'psql -d madlib -U $PGDB_USER -p $PGDB_PORT -c "GRANT USAGE ON SCHEMA madlib TO madlibtester"'
             (5) Run 'pg_ctl stop -w -D $PATH_TO_PG_DATA_DIRECTORY'



### Write your own test cases and add them in a schedule
Step 09: Configure test data sets
         The test data sets specification may differ for each algorithm in MADlib, below is the example for kmeans.
         You need to add them in '$MADMARK_HOME/casespec/metadata/dataset.xml'.

	<datasets>
        	<dataset>
        	<name>km_data_100000_2000</name>
        	<rows>100000</rows>
        	<algorithm>
           	<method>
               		<name>kmeans_cset</name>
                	<parameter>
                    		<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
                	<parameter>
                    		<name>init_cset_rel</name>
                  	 	 <value>madlibtestdata.km_data_100000_2000_centroids</value>
               		</parameter>
                	<parameter>
                    		<name>init_cset_col</name>
                   		<value>position</value>
               	 	</parameter>
           	</method>
           	<method>
                	<name>kmeans_plusplus</name>
                	<parameter>
                        	<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
           	</method>
           	<method>
                	<name>kmeans_random</name>
                	<parameter>
                    		<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
           	</method>
           	<method>
                	<name>kmeans_canopy</name>
                	<parameter>
                		<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
           	</method>
           	<method>
                	<name>kmeans_cset_ctas</name>
                	<parameter>
                    		<name>table_name</name>
                    		<value>madlibtestresult.kmeans_cset_ctas_data_100000_2000</value>
                	</parameter>
                	<parameter>
                    		<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
                	<parameter>
                    		<name>init_cset_rel</name>
                    		<value>madlibtestdata.km_data_100000_2000_centroids</value>
                	</parameter>
                	<parameter>
                    		<name>init_cset_col</name>
                    		<value>position</value>
                	</parameter>
           	</method>
           	<method>
                	<name>kmeans_plusplus_ctas</name>
                	<parameter>
                    		<name>table_name</name>
                    		<value>madlibtestresult.kmeans_plusplus_ctas_data_100000_2000</value>
                	</parameter>
                	<parameter>
                    		<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
           	</method>
           	<method>
                	<name>kmeans_random_ctas</name>
                	<parameter>
                    		<name>table_name</name>
                    		<value>madlibtestresult.kmeans_random_ctas_data_100000_2000</value>
                	</parameter>
                	<parameter>
                    		<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
           	</method>
           	<method>
                	<name>kmeans_canopy_ctas</name>
                	<parameter>
                    		<name>table_name</name>
                    		<value>madlibtestresult.kmeans_canopy_ctas_data_100000_2000</value>
                	</parameter>
                	<parameter>
                    		<name>src_relation</name>
                    		<value>madlibtestdata.km_data_100000_2000</value>
                	</parameter>
           	</method>
        	</algorithm>
        	</dataset>
	</datasets>

Step 10: Write test cases specification
         For each algorithm you need to write your own test cases specificaiton so that madmark can automatically generate runnable test cases for you.
         Below are the test cases specificaiton for kmeans which will generate 8 test cases:

	<test_suites>
    		<test_type>feature</test_type>
    		<multi_test_suites>
        		<algorithm>kmeans</algorithm>
        		<methods>
            			<method>
               				<name>kmeans_cset</name>
                			<parameter>
                    				<name>benchmark</name>
                    				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
            			<method>
                			<name>kmeans_plusplus</name>
                			<parameter>
                    				<name>benchmark</name>
                   				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
            			<method>
                			<name>kmeans_random</name>
                			<parameter>
                    				<name>benchmark</name>
                    				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
            			<method>
                			<name>kmeans_canopy</name>
              	 	 		<parameter>
                    				<name>benchmark</name>
                    				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
            			<method>
                			<name>kmeans_cset_ctas</name>
                			<parameter>
                    				<name>benchmark</name>
                    				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
            			<method>
                			<name>kmeans_plusplus_ctas</name>
                			<parameter>
                    				<name>benchmark</name>
                    				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
            			<method>
                			<name>kmeans_random_ctas</name>
                			<parameter>
                    				<name>benchmark</name>
                    				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
            			<method>
                			<name>kmeans_canopy_ctas</name>
                			<parameter>
                    				<name>benchmark</name>
                    				<value>TemplateExecutor</value>
                			</parameter>
            			</method>
        		</methods>

       			<test_suite>
            			<name>kmeans_cset_baseline</name>
            			<comments>It is to get baseline of kmeans using predefined centroids.</comments>
                		<!-- It indicate max execution times-->
               	 		<execute_rate>1</execute_rate>
            			<method>
                			<name>kmeans_cset</name>
                			<list_parameter>
                    				<name>dataset</name>
                   				<value>km_data_100000_200</value>
                                                <value>km_data_100000_2000</value>
               				</list_parameter>
                			<list_parameter>
                    				<name>dist_metric</name>
                    				<value>l1norm</value>
                                                <value>l2norm</value>
                                                <value>cosine</value>
                                                <value>tanimoto</value>
                			</list_parameter>
                			<parameters>
                    				<parameter>
                        				<name>src_col_data</name>
                       					<value>position</value>
                    				</parameter>
                    				<parameter>
                        				<name>src_col_id</name>
                        				<value>pid</value>
                    				</parameter>
                    				<parameter>
                        				<name>out_points</name>
                        				<value>madlibtestresult.kmeans_cset_baseline_out_points</value>
                    				</parameter>
                    				<parameter>
                        				<name>out_centroids</name>
                        				<value>madlibtestresult.kmeans_cset_baseline_out_centroids</value>
                    				</parameter>
                			</parameters>
                			<tear_down>
                     				DROP TABLE IF EXISTS madlibtestresult.kmeans_cset_baseline_out_points;DROP TABLE IF EXISTS madlibtestresult.kmeans_cset_baseline_out_centroids;
                			</tear_down>
            			</method>
        		</test_suite>
    		</multi_test_suites>
	</test_suites>

Step 11: Write schedule of test cases
         In '$MADMARK_HOME/schedule', you might write files which contain test cases, file name in which contains test cases, and yaml file that is a schedule for a run
         As in below example, 'case_kmeans' is a file which has 4 test cases for kmeans; 'skip_kmeans_canopy' is a file which has 2 test cases that will be skipped;
         'list_full_regression' is a file which contains the name of the file 'case_kmeans', and 'schedule.yaml' is a file which will be used as a schedule by madmark.

# case_kmeans
kmeans_cset_baseline_0_0
kmeans_cset_baseline_0_1
kmeans_cset_baseline_0_2
kmeans_cset_baseline_0_3
kmeans_cset_baseline_0_4
kmeans_cset_baseline_0_5
kmeans_cset_baseline_0_6
kmeans_cset_baseline_0_7

# skip_kmeans_canopy
kmeans_cset_baseline_0_4
kmeans_cset_baseline_0_5
kmeans_cset_baseline_0_6
kmeans_cset_baseline_0_7

# list_full_regression
case_kmeans

# schedule.yaml
- cases : case_kmeans
  platform : GPDB_4.2.0
  unique : true

# or schedule.yaml
- lists: list_full_regression
  platform : GPDB_4.2.0
  unique : true



### Run MADlib test ###
Step 12: Initialize test result database

         (1) NOTE: Manually add access entry in pg_hba.conf on test result database for user gpdbchina
                   i.e., add 'host   all   $TEST_DB_USER   $TEST_DB_HOST/32   trust' in '$RESULT_DB_MASTER_DATA_DIRECTORY/pg_hba.conf'

         (2) IF THE FIRST TIME USING MADMARK: run 'cd $MADMARK_HOME/bin; python run.py -i'
             OTHERWISE:                       run 'cd $MADMARK_HOME/bin; python run.py -g'

Step 13: Run MADlib test

         (1) Source the test result database's environment variable file
         (2) Run 'cd $MADMARK_HOME/schedule; cp schedule.yaml.example schedule.yaml' and then edit the test suites in the schedule file
         (3) Run 'cd $MADMARK_HOME/bin; nohup python run.py -s schedule.yaml  > schedule.log 2>&1 &' to start the test in background

